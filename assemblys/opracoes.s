.data

.text 
.globl foo


foo: 

	push %rbp
	movq %rsp, %rbp
	subq $32, %rsp

	/* -var(%rbp), %r10d  -> 0x44 0x8b 0x55 0x100-var */

	movl -0x04(%rbp), %r10d
	movl -0x08(%rbp), %r10d
	movl -0x0c(%rbp), %r10d
	movl -0x10(%rbp), %r10d
	movl -0x14(%rbp), %r10d



	movl %edi, %r10d /* 0x41 0x89 0xfa */
	
	/* 0x41 0xba 0x00 0x00 0x00 0x00  (OXOO eh constante em little endian) */
	movl $100, %r10d
	movl $10000, %r10d


	/* 0x44 0x03 0x55 0x100-var */
	addl -0x04(%rbp), %r10d
	addl -0x08(%rbp), %r10d
	addl -0x0c(%rbp), %r10d
	addl -0x10(%rbp), %r10d
	addl -0x14(%rbp), %r10d

	/* 0x41 0x01 0xfa */

	addl %edi, %r10d

	/* 0x41 0x83 0xc2 0x00 0x00 0x00 0x00 -> quatro 0x00 se cte >= 128, apenas um caso contrario */

	addl $1, %r10d
	addl $100, %r10d
	addl $10000, %r10d

	addl $-1, %r10d
	addl $-100, %r10d
	addl $-10000, %r10d

	/* 0x44 0x2b 0x55 0x100-var */

	subl -0x04(%rbp), %r10d
	subl -0x08(%rbp), %r10d
	subl -0x0c(%rbp), %r10d
	subl -0x10(%rbp), %r10d
	subl -0x14(%rbp), %r10d

	/* 0x41 0x29 0xfa */

	subl %edi, %r10d

	/* 0x41 0x81 0xea 0x00 0x00 0x00 0x00 -> quatro 0x00 se cte >= 128, 
	0x41 0x83 0xea 0x00	caso contrario 	
	*/
	subl $1, %r10d
	subl $100, %r10d
	subl $10000, %r10d

	/* 0x44 0x0f 0xaf 0x55 0x100-var */

	imul -0x04(%rbp), %r10d
	imul -0x08(%rbp), %r10d
	imul -0x0c(%rbp), %r10d
	imul -0x10(%rbp), %r10d
	imul -0x14(%rbp), %r10d

	/* 0x44 0x0f 0xaf 0xd7 */

	imul %edi, %r10d

	/* 	0x45 0x6b 0xd2 0x00 0x00 0x00 0x00 -> quatro 0x00 se cte >= 128, apenas um caso contrario */

	imul $100, %r10d
	imul $10000, %r10d

	

	/* 0x44 0x89 0x55 0x100-var */

	movl %r10d, -0x04(%rbp)
	movl %r10d, -0x08(%rbp)
	movl %r10d, -0x0c(%rbp)
	movl %r10d, -0x10(%rbp)
	movl %r10d, -0x14(%rbp)


 	/* 0xc9 0xc3 */
	leave
	ret
